# -*- coding: utf-8 -*-
"""MovieRecommender.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PT7Qy0wL8aO51rm8S3MXlONBY4ecD0lv
"""

import pandas as pd

import numpy as np

df_credits = pd.read_csv('/content/tmdb_5000_credits.csv')
df_credits.tail()

df_movie = pd.read_csv('/content/tmdb_5000_movies.csv')
df_movie.tail()

df_movie['cast'] = df_credits['cast']
df_movie['crew'] = df_credits['crew']

df_movie.columns

df_movie.rename(columns={'id':'movie_id'}, inplace=True)

df_movie.columns

# useful columns - genres, id (needed later),keywords, overview, title, cast, crew

df = df_movie[['movie_id','genres','keywords','overview','title','cast','crew']]
df.head()

df.isnull().sum()
df.shape

df.dropna(inplace = True)
df.shape

df.duplicated().sum()

import json

str_data = df['genres'][1]
obj = json.loads(str_data)
genre = []

for i in obj:
  genre.append(i['name'])

print(genre)

def get_genre_name(sentence):
  obj = json.loads(sentence)
  genre = []
  for i in obj:
    genre.append(i['name'])

  return(genre)

df['tags_genre'] = df['genres'].apply(get_genre_name)

df.head()

def get_keyword_name(sentence):
  obj = json.loads(sentence)
  keyword = []
  for i in obj:
    keyword.append(i['name'])

  return(keyword)

df['tags_keyword'] = df['keywords'].apply(get_keyword_name)

def get_crew_name(sentence):
  obj = json.loads(sentence)
  crew = []
  for i in obj:
    crew.append(i['name'])

  return(crew)

df['tags_crew'] = df['crew'].apply(get_crew_name)

def get_cast_name(sentence):
  obj = json.loads(sentence)
  cast = []
  for i in obj:
    cast.append(i['name'])

  return(cast)

df['tags_cast'] = df['cast'].apply(get_cast_name)

df.drop(columns=['genres','keywords','cast','crew'], inplace = True)

df.head()

# convert overview into a list, so that we can concatenate it with all the other lists

df['overview'] = df['overview'].apply(lambda x:x.split())
df.head()

# Remove spaces in between names of people so that the model does not take them as two different names (nameSurname)

# type(df['tags_genre'][0])


def remove_spaces(sentence):
    for idx in range(len(sentence)):
        if ' ' in sentence[idx]:
            sentence[idx] = sentence[idx].replace(' ', '')
    return(sentence)

df['tags_genre'] = df['tags_genre'].apply(remove_spaces)
df['tags_keyword'] = df['tags_keyword'].apply(remove_spaces)
df['tags_crew'] = df['tags_crew'].apply(remove_spaces)
df['tags_cast'] = df['tags_cast'].apply(remove_spaces)

df.head()

df['tags'] = df['overview']+df['tags_genre']+df['tags_keyword']+df['tags_crew']+df['tags_cast']

df = df.drop(columns = ['overview','tags_genre','tags_keyword','tags_crew','tags_cast'])

df.head()

df['tags'] = df['tags'].apply(lambda x:" ".join(x))

df.head()

df['tags'] = df['tags'].str.lower()

df.head()

import nltk
from nltk.stem.porter import PorterStemmer

ps = PorterStemmer()

def stem(sentence):
  y = []
  for i in sentence.split():
    y.append(ps.stem(i))

  return(" ".join(y)) # converting a list to a string

df['tags'] = df['tags'].apply(stem)

df.head()

# Tf_Idf

from sklearn.feature_extraction.text import TfidfVectorizer

tf_idf = TfidfVectorizer(max_features=3000, stop_words = 'english')

vectors = tf_idf.fit_transform(df['tags']).toarray()

# cosine angle between the vectors

from sklearn.metrics.pairwise import cosine_similarity

similarity = cosine_similarity(vectors)

def recommend(movie):
  i = df[df['title'] == movie].index[0]
  data = similarity[i]
  listed = list(enumerate(data)) # to preserve the index and the values together
  top_5 = sorted(listed, reverse=True, key=lambda x:x[1])[:6] # the lambda function will sort based on the value and not the index

  for i in top_5:
    print(df.iloc[i[0]].title)

recommend('Avatar')

import pickle
pickle.dump(df,open('movie.pkl','wb'))

pickle.dump(similarity,open('similarity.pkl','wb'))